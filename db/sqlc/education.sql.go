// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: education.sql

package db

import (
	"context"
	"time"
)

const createEducation = `-- name: CreateEducation :one
INSERT INTO
    education (name, link, description, date)
VALUES
    ($1, $2, $3, $4) RETURNING id, name, link, description, date
`

type CreateEducationParams struct {
	Name        string    `json:"name"`
	Link        string    `json:"link"`
	Description string    `json:"description"`
	Date        time.Time `json:"date"`
}

func (q *Queries) CreateEducation(ctx context.Context, arg CreateEducationParams) (Education, error) {
	row := q.db.QueryRowContext(ctx, createEducation,
		arg.Name,
		arg.Link,
		arg.Description,
		arg.Date,
	)
	var i Education
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Link,
		&i.Description,
		&i.Date,
	)
	return i, err
}

const deleteEducation = `-- name: DeleteEducation :exec
DELETE FROM education
WHERE id = $1
`

func (q *Queries) DeleteEducation(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEducation, id)
	return err
}

const getEducations = `-- name: GetEducations :many
SELECT id, name, link, description, date
FROM education
LIMIT 1
`

func (q *Queries) GetEducations(ctx context.Context) ([]Education, error) {
	rows, err := q.db.QueryContext(ctx, getEducations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Education{}
	for rows.Next() {
		var i Education
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Link,
			&i.Description,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
