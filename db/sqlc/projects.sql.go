// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: projects.sql

package db

import (
	"context"
	"time"
)

const createProject = `-- name: CreateProject :one
INSERT INTO
    projects (name, link, description, date)
VALUES
    ($1, $2, $3, $4) RETURNING id, name, link, description, date
`

type CreateProjectParams struct {
	Name        string    `json:"name"`
	Link        string    `json:"link"`
	Description string    `json:"description"`
	Date        time.Time `json:"date"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.Name,
		arg.Link,
		arg.Description,
		arg.Date,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Link,
		&i.Description,
		&i.Date,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getProjects = `-- name: GetProjects :many
SELECT id, name, link, description, date
FROM projects
LIMIT 1
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Link,
			&i.Description,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
